<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Breach Checker</title>
    <link rel="stylesheet" href="/safePassword.css">
</head>
<body>
<div class="login-container">
    <h1>Register</h1>
    <form id="registerForm" action="/register" method="post" onsubmit="checkPassword(event)">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>

        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>

        <button type="submit">Register</button>
    </form>
    <br>
    <div id="result" class="hidden"></div>
    <br>
    <div id="tips" class="hidden"></div>

</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        applyDarkMode();
    });

    function applyDarkMode() {
        const isDarkMode = localStorage.getItem('darkMode') === 'true';
        if (isDarkMode) {
            document.body.classList.add('dark-mode');
        }
    }

    async function sha1(string) {
        const buffer = new TextEncoder("utf-8").encode(string);
        const hashBuffer = await crypto.subtle.digest("SHA-1", buffer);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        return hashHex.toUpperCase();
    }

    async function hibpCheck(pwd) {
        try {
            const hash = await sha1(pwd);
            const prefix = hash.substr(0, 5);
            const suffix = hash.substr(5);
            const response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`, {
                method: 'GET',
                headers: {
                    'Add-Padding': 'true'
                }
            });
            if (!response.ok) {
                throw new Error(`API request failed with status ${response.status}`);
            }
            const text = await response.text();
            const hashes = text.split('\n');
            for (const hashLine of hashes) {
                const [hashSuffix] = hashLine.split(':');
                if (hashSuffix.trim() === suffix) {
                    return true; // Contraseña encontrada en brechas
                }
            }
            return false; // Contraseña no encontrada
        } catch (error) {
            console.error('Error in hibpCheck:', error);
            throw error;
        }
    }

    function showPasswordTips() {
        const tipsDiv = document.getElementById('tips');
        tipsDiv.classList.remove('hidden');
        tipsDiv.classList.add('show');
        tipsDiv.innerHTML = `
        <h2>Tips for a Stronger Password:</h2>
        <ul>
            <li><strong>Length:</strong> Use at least 12 characters - longer passwords are harder to crack.</li>
            <li><strong>Mix Characters:</strong> Combine uppercase letters, lowercase letters, numbers, and special characters (@#$%^&*).</li>
            <li><strong>Avoid Personal Info:</strong> Don't use birthdays, names, or common words that could be guessed.</li>
            <li><strong>Use Passphrases:</strong> Consider using a memorable phrase like "Purple-Horse-Battery-99!" instead of a single word.</li>
            <li><strong>Unique Passwords:</strong> Use different passwords for each account - consider a password manager.</li>
            <li><strong>Random Elements:</strong> Add unexpected elements like "Tr@ffic_L1ght_D@nce_2024!"</li>
        </ul>`;
    }

    function hidePasswordTips() {
        const tipsDiv = document.getElementById('tips');
        tipsDiv.classList.add('hidden');
        tipsDiv.classList.remove('show');
    }

    async function checkPassword(event) {
        event.preventDefault(); // Evita el envío del formulario en caso de que la contraseña no sea segura
        const password = document.getElementById('password').value;
        const resultDiv = document.getElementById('result');

        if (!password) {
            showResult('Please enter a password', 'warning');
            hidePasswordTips();
            return false;
        }

        showResult('Checking...', 'info');
        hidePasswordTips();

        try {
            const found = await hibpCheck(password);
            if (found) {
                showResult('⚠️ This password has been found in data breaches. Please choose a different password!', 'error');
                showPasswordTips();
                return false;
            } else {
                showResult('✅ Good news! This password hasn\'t been found in any known data breaches.', 'success');
                hidePasswordTips();
                document.getElementById('registerForm').submit(); // Envío solo si la contraseña es segura
            }
        } catch (error) {
            console.error('Error checking password:', error);
            showResult('An error occurred while checking the password. Please try again. (Error: ' + error.message + ')', 'error');
            hidePasswordTips();
            return false;
        }
    }

    function showResult(message, type) {
        const resultDiv = document.getElementById('result');
        resultDiv.classList.remove('hidden');
        resultDiv.textContent = message;

        resultDiv.className = 'hidden';
        resultDiv.classList.add('show', type === 'error' ? 'text-red' : 'text-green');
    }
</script>
</body>
</html>

