<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Breach Checker</title>
    <link rel="stylesheet" href="/safePassword.css">
</head>
<body>
<div class="container">
    <h1>Password Breach Checker</h1>

    <div class="input-group">
        <label for="password">Enter Password to Check:</label>
        <input type="password" id="password" placeholder="Enter your password">
    </div>

    <button onclick="checkPassword()">Check Password</button>

    <div id="result" class="hidden">
        <!-- Result will be shown here -->
    </div>

    <div id="tips" class="hidden">
        <!-- Password tips will be shown here -->
    </div>
</div>

<script>
    async function sha1(string) {
        const buffer = new TextEncoder("utf-8").encode(string);
        const hashBuffer = await crypto.subtle.digest("SHA-1", buffer);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        return hashHex.toUpperCase();
    }

    async function hibpCheck(pwd) {
        try {
            const hash = await sha1(pwd);
            const prefix = hash.substr(0, 5);
            const suffix = hash.substr(5);

            const response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`, {
                method: 'GET',
                headers: {
                    'Add-Padding': 'true'
                }
            });

            if (!response.ok) {
                throw new Error(`API request failed with status ${response.status}`);
            }

            const text = await response.text();
            const hashes = text.split('\n');

            for (const hashLine of hashes) {
                const [hashSuffix] = hashLine.split(':');
                if (hashSuffix.trim() === suffix) {
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error('Error in hibpCheck:', error);
            throw error;
        }
    }

    function showPasswordTips() {
        const tipsDiv = document.getElementById('tips');
        tipsDiv.classList.remove('hidden');  // Quita la clase que oculta los tips
        tipsDiv.classList.add('show');       // Agrega la clase para mostrar los tips
        tipsDiv.innerHTML = `
        <h2>Tips for a Stronger Password:</h2>
        <ul>
            <li><strong>Length:</strong> Use at least 12 characters - longer passwords are harder to crack.</li>
            <li><strong>Mix Characters:</strong> Combine uppercase letters, lowercase letters, numbers, and special characters (@#$%^&*).</li>
            <li><strong>Avoid Personal Info:</strong> Don't use birthdays, names, or common words that could be guessed.</li>
            <li><strong>Use Passphrases:</strong> Consider using a memorable phrase like "Purple-Horse-Battery-99!" instead of a single word.</li>
            <li><strong>Unique Passwords:</strong> Use different passwords for each account - consider a password manager.</li>
            <li><strong>Random Elements:</strong> Add unexpected elements like "Tr@ffic_L1ght_D@nce_2024!"</li>
        </ul>
    `;
    }

    function hidePasswordTips() {
        const tipsDiv = document.getElementById('tips');
        tipsDiv.classList.add('hidden');   // Agrega la clase para ocultar los tips
        tipsDiv.classList.remove('show');  // Quita la clase que muestra los tips
    }


    async function checkPassword() {
        const password = document.getElementById('password').value;
        const resultDiv = document.getElementById('result');

        if (!password) {
            showResult('Please enter a password', 'warning');
            hidePasswordTips();
            return;
        }

        showResult('Checking...', 'info');
        hidePasswordTips();

        try {
            const found = await hibpCheck(password);
            if (found) {
                showResult('⚠️ This password has been found in data breaches. Please choose a different password!', 'error');
                showPasswordTips();
            } else {
                showResult('✅ Good news! This password hasn\'t been found in any known data breaches.', 'success');
                hidePasswordTips();
            }
        } catch (error) {
            console.error('Error checking password:', error);
            showResult('An error occurred while checking the password. Please try again. (Error: ' + error.message + ')', 'error');
            hidePasswordTips();
        }
    }

    function showResult(message, type) {
        const resultDiv = document.getElementById('result');
        resultDiv.classList.add('show');  // Asegúrate de agregar la clase show para mostrar el div.

        // Reset clases
        resultDiv.className = 'mt-4 p-4 rounded-md show';

        // Agrega el estilo basado en el tipo de mensaje
        switch (type) {
            case 'error':
                resultDiv.classList.add('bg-red-100', 'text-red-700');
                break;
            case 'success':
                resultDiv.classList.add('bg-green-100', 'text-green-700');
                break;
            case 'warning':
                resultDiv.classList.add('bg-yellow-100', 'text-yellow-700');
                break;
            case 'info':
                resultDiv.classList.add('bg-blue-100', 'text-blue-700');
                break;
        }

        resultDiv.textContent = message; // Asegúrate de que el mensaje se imprima correctamente
    }
</script>
</body>
</html>
