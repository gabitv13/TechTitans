<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Breach Checker</title>
    <link rel="stylesheet" href="/safePassword.css">
    <script>
        async function sha1(string) {
            const buffer = new TextEncoder("utf-8").encode(string);
            const hashBuffer = await crypto.subtle.digest("SHA-1", buffer);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('').toUpperCase();
        }

        async function hibpCheck(password) {
            try {
                const hash = await sha1(password);
                const prefix = hash.substring(0, 5);
                const suffix = hash.substring(5);
                const response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`);
                if (!response.ok) throw new Error(`Error en la API: ${response.status}`);

                const breaches = await response.text();
                return breaches.includes(suffix);
            } catch (error) {
                console.error("Error al comprobar la contraseña:", error);
                throw error;
            }
        }

        function showPasswordTips() {
            const tipsDiv = document.getElementById('tips');
            tipsDiv.classList.remove('hidden'); // Mostrar los tips
            tipsDiv.classList.add('show'); // Asegurarse de que el contenedor sea visible
            tipsDiv.innerHTML = `
                <h2>Consejos para una contraseña más segura:</h2>
                <ul>
                    <li>Usa al menos 12 caracteres: las contraseñas largas son más seguras.</li>
                    <li>Incluye mayúsculas, minúsculas, números y caracteres especiales (@#$%).</li>
                    <li>No uses información personal como nombres o fechas importantes.</li>
                    <li>Considera usar frases de contraseña como "Caballo-Verde_123!".</li>
                    <li>No reutilices contraseñas en diferentes sitios.</li>
                </ul>
            `;
        }

        function hidePasswordTips() {
            const tipsDiv = document.getElementById('tips');
            tipsDiv.classList.add('hidden'); // Ocultar los tips
            tipsDiv.classList.remove('show'); // Asegurarse de que el contenedor esté oculto
            tipsDiv.innerHTML = "";
        }

        async function checkPassword(event) {
            event.preventDefault(); // Evitar envío si la contraseña no es segura
            const password = document.getElementById('password').value;

            // Validaciones básicas
            if (!password) {
                alert('Por favor, introduce una contraseña.');
                return;
            }
            if (password.length < 8) {
                alert('La contraseña debe tener al menos 8 caracteres.');
                showPasswordTips();
                return;
            }

            try {
                const isBreached = await hibpCheck(password);
                if (isBreached) {
                    alert('Esta contraseña ha sido encontrada en brechas de datos. Por favor, usa otra.');
                    showPasswordTips();
                } else {
                    alert('¡La contraseña es segura! Registrando...');
                    hidePasswordTips();
                    document.getElementById('registerForm').submit();
                }
            } catch (error) {
                alert('Error al comprobar la contraseña. Inténtalo de nuevo más tarde.');
            }
        }
    </script>
</head>
<body>
<div class="login-container">
    <h1>Register</h1>
    {{#errorMessage}}
        <div class="alert">
            <script>
                alert("{{errorMessage}}");
            </script>
        </div>
    {{/errorMessage}}
    <form id="registerForm" action="/register" method="post" onsubmit="checkPassword(event)">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>

        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>

        <button type="submit">Register</button>
    </form>
    <div id="tips" class="hidden"></div>
</div>
<br>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        applyDarkMode();
    });

    function applyDarkMode() {
        const isDarkMode = localStorage.getItem('darkMode') === 'true';
        if (isDarkMode) {
            document.body.classList.add('dark-mode');
        }
    }

    async function sha1(string) {
        const buffer = new TextEncoder("utf-8").encode(string);
        const hashBuffer = await crypto.subtle.digest("SHA-1", buffer);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        return hashHex.toUpperCase();
    }


</body>
</html>

