<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Encriptador de Texto</title>
    <link rel="shortcut icon" href="img/favicon.png" type="image/x-icon" />
    <link rel="stylesheet" href="/encrypt.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
</head>
<body>
<div class="container">
    <!-- Título principal -->
    <div class="titulo-principal">
        <h1>Encriptador de Texto</h1>
    </div>

    <!-- Sección de Encriptar -->
    <div class="seccion-encriptar">
        <div class="titulo-seccion">
            <h2>Encriptar</h2>
        </div>
        <br>
        <!-- Botones de cifrado -->
        <div class="botones-accion">
            <button id="btn-personalizado-encriptar" class="btn-encriptar">Encriptar Personalizado</button>
            <button id="btn-cesar-encriptar" class="btn-encriptar">Encriptar César</button>
            <button id="btn-aes-encriptar" class="btn-encriptar">Encriptar AES</button>
            <button id="btn-des-encriptar" class="btn-encriptar">Encriptar DES</button>
        </div>

        <br>
        <!-- Cuadro de texto y resultado para encriptar -->
        <textarea id="textoEncriptar" placeholder="Texto a encriptar"></textarea>
        <div class="terminos">
            <p>Solo letras minúsculas y sin acentos</p>
        </div>
        <br>
        <div class="resultado">
            <p id="resultado-encriptar">Resultado de encriptación</p>
        </div>
        <br>
        <div class="botones-accion">
            <button onclick="copiarTexto('resultado-encriptar')" class="btn-copiar">Copiar Encriptado</button>
        </div>
    </div>

    <!-- Sección de Desencriptar -->
    <div class="seccion-desencriptar">
        <div class="titulo-seccion">
            <h2>Desencriptar</h2>
        </div>
        <br>
        <!-- Botones de descifrado -->
        <div class="botones-accion">
            <button id="btn-personalizado-desencriptar" class="btn-desencriptar">Desencriptar Personalizado</button>
            <button id="btn-cesar-desencriptar" class="btn-desencriptar">Desencriptar César</button>
            <button id="btn-aes-desencriptar" class="btn-desencriptar">Desencriptar AES</button>
            <button id="btn-des-desencriptar" class="btn-desencriptar">Desencriptar DES</button>
        </div>
        <br>
        <!-- Cuadro de texto y resultado para desencriptar -->
        <textarea id="textoDesencriptar" placeholder="Texto a desencriptar"></textarea>
        <br>
        <div class="resultado">
            <p id="resultado-desencriptar">Resultado de desencriptación</p>
        </div>
        <br>
        <div class="botones-accion">
            <button onclick="copiarTexto('resultado-desencriptar')" class="btn-copiar">Copiar Desencriptado</button>
        </div>
        <br>
        <div class="botones-accion">
            <button onclick="window.location.href='/'" class="btn-desencriptar">Volver</button>
        </div>
    </div>
</div>
</body>
</html>


<script>

    // Comprobar si el modo oscuro está habilitado en el localStorage
    document.addEventListener('DOMContentLoaded', () => {
        applyDarkMode();

        // Añadir event listener para el botón de modo oscuro
        const darkModeToggle = document.getElementById('dark-mode-toggle');
        darkModeToggle.addEventListener('click', toggleDarkMode);
    });

    function applyDarkMode() {
        const isDarkMode = localStorage.getItem('darkMode') === 'true';
        if (isDarkMode) {
            document.body.classList.add('dark-mode');
        }
    }

    // Función para generar un hash simple de la clave
    function generarHashClave(clave) {
        return [...clave].reduce((hash, char) => (hash * 31 + char.charCodeAt(0)) % 1e9, 7); // Genera un número pseudo-único
    }

    // Cifrado personalizado
    function encriptar() {
        let texto = document.getElementById("textoEncriptar").value;

        if (texto.trim() === "") {
            document.getElementById("resultado-encriptar").textContent = "Ingresa texto para encriptar";
            return;
        }

        if (!/^[a-z\s]+$/.test(texto)) {
            document.getElementById("resultado-encriptar").textContent = "Solo se permiten letras minúsculas sin acentos";
            return;
        }

        const clave = prompt("Ingresa una clave de cifrado:");
        if (!clave || !/^[a-z]+$/.test(clave)) {
            document.getElementById("resultado-encriptar").textContent = "La clave debe contener solo letras minúsculas";
            return;
        }

        const hashClave = generarHashClave(clave).toString(16); // Hash en formato hexadecimal
        const desplazamientoBase = [...clave].reduce((acc, char) => acc + char.charCodeAt(0), 0);

        let textoCifrado = texto.split("").map((char, index) => {
            if (char === " ") return " "; // No modifica espacios
            const offset = (clave.charCodeAt(index % clave.length) + desplazamientoBase) % 26;
            return String.fromCharCode(((char.charCodeAt(0) - 97 + offset) % 26) + 97);
        }).join("");

        textoCifrado = textoCifrado.split("").reverse().join(""); // Inversión del texto
        textoCifrado = hashClave + ":" + textoCifrado; // Incluye el hash de la clave al inicio

        document.getElementById("resultado-encriptar").textContent = textoCifrado;
    }

    // Desencriptado personalizado con validación
    function desencriptar() {
        let texto = document.getElementById("textoDesencriptar").value;

        if (texto.trim() === "") {
            document.getElementById("resultado-desencriptar").textContent = "Ingresa texto para desencriptar";
            return;
        }

        const clave = prompt("Ingresa la clave de descifrado:");
        if (!clave || !/^[a-z]+$/.test(clave)) {
            document.getElementById("resultado-desencriptar").textContent = "La clave debe contener solo letras minúsculas";
            return;
        }

        const [hashClaveOriginal, textoCifrado] = texto.split(":");
        if (!hashClaveOriginal || !textoCifrado) {
            document.getElementById("resultado-desencriptar").textContent = "Texto cifrado inválido";
            return;
        }

        const hashClave = generarHashClave(clave).toString(16);
        if (hashClave !== hashClaveOriginal) {
            document.getElementById("resultado-desencriptar").textContent = "Clave incorrecta, no se puede descifrar";
            return;
        }

        const desplazamientoBase = [...clave].reduce((acc, char) => acc + char.charCodeAt(0), 0);
        const textoRevertido = textoCifrado.split("").reverse().join(""); // Reversión del texto

        let textoDescifrado = textoRevertido.split("").map((char, index) => {
            if (char === " ") return " "; // No modifica espacios
            const offset = (clave.charCodeAt(index % clave.length) + desplazamientoBase) % 26;
            return String.fromCharCode(((char.charCodeAt(0) - 97 - offset + 26) % 26) + 97);
        }).join("");

        document.getElementById("resultado-desencriptar").textContent = textoDescifrado;
    }

    //Cesar
    function encriptarCesar() {
        let texto = document.getElementById("textoEncriptar").value;

        if (texto.trim() === "") {
            document.getElementById("resultado-encriptar").textContent = "Ingresa texto para encriptar";
            return;
        }

        if (!/^[a-z\s]+$/.test(texto)) {
            document.getElementById("resultado-encriptar").textContent = "Solo se permiten letras minúsculas sin acentos";
            return;
        }

        const desplazamiento = parseInt(prompt("Introduce el desplazamiento (1-25):"), 10);

        if (isNaN(desplazamiento) || desplazamiento < 1 || desplazamiento > 25) {
            document.getElementById("resultado-encriptar").textContent = "Desplazamiento inválido. Debe ser un número entre 1 y 25.";
            return;
        }

        const textoCifrado = texto.split("").map(char => {
            if (char === " ") return " "; // No modifica espacios
            const code = char.charCodeAt(0);
            return String.fromCharCode(((code - 97 + desplazamiento) % 26) + 97);
        }).join("");

        document.getElementById("resultado-encriptar").textContent = textoCifrado;
    }

    function desencriptarCesar() {
        let texto = document.getElementById("textoDesencriptar").value;

        if (texto.trim() === "") {
            document.getElementById("resultado-desencriptar").textContent = "Ingresa texto para desencriptar";
            return;
        }

        const desplazamiento = parseInt(prompt("Introduce el desplazamiento (1-25):"), 10);

        if (isNaN(desplazamiento) || desplazamiento < 1 || desplazamiento > 25) {
            document.getElementById("resultado-desencriptar").textContent = "Desplazamiento inválido. Debe ser un número entre 1 y 25.";
            return;
        }

        const textoDescifrado = texto.split("").map(char => {
            if (char === " ") return " "; // No modifica espacios
            const code = char.charCodeAt(0);
            return String.fromCharCode(((code - 97 - desplazamiento + 26) % 26) + 97);
        }).join("");

        document.getElementById("resultado-desencriptar").textContent = textoDescifrado;
    }

    //AJEUSTAR CLAVE (AES)
    function ajustarClave(clave, longitudRequerida) {
        return CryptoJS.enc.Utf8.parse(
                clave.padEnd(longitudRequerida, "0").substring(0, longitudRequerida)
        );
    }


    // AES
    function encriptarAES(texto, clave) {
        const claveAjustada = ajustarClave(clave, 16); // AES-128 usa 16 bytes
        const textoCifrado = CryptoJS.AES.encrypt(texto, claveAjustada, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7,
        }).toString();
        return textoCifrado; // Devuelve en Base64
    }


    function desencriptarAES(textoCifrado, clave) {
        try {
            const claveAjustada = ajustarClave(clave, 16); // AES-128 usa 16 bytes
            const bytes = CryptoJS.AES.decrypt(textoCifrado, claveAjustada, {
                mode: CryptoJS.mode.ECB,
                padding: CryptoJS.pad.Pkcs7,
            });
            const textoDescifrado = bytes.toString(CryptoJS.enc.Utf8);
            if (!textoDescifrado) throw new Error("Texto no válido");
            return textoDescifrado;
        } catch (error) {
            console.error("Error en AES:", error);
            return null;
        }
    }


    // DES
    function encriptarDES(texto, clave) {
        const claveAjustada = ajustarClave(clave, 8); // DES usa 8 bytes
        const textoCifrado = CryptoJS.DES.encrypt(texto, claveAjustada, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7,
        }).toString();
        return textoCifrado; // Devuelve en Base64
    }

    function desencriptarDES(textoCifrado, clave) {
        try {
            const claveAjustada = ajustarClave(clave, 8); // Usa la misma función de ajuste que en encriptación
            const bytes = CryptoJS.DES.decrypt(textoCifrado, claveAjustada, {
                mode: CryptoJS.mode.ECB,
                padding: CryptoJS.pad.Pkcs7,
            });
            const textoDescifrado = bytes.toString(CryptoJS.enc.Utf8);
            if (!textoDescifrado) throw new Error("Error al descifrar DES");
            return textoDescifrado;
        } catch (error) {
            console.error("Error al descifrar DES:", error.message);
            return null;
        }
    }

    // Copiar texto
    function copiarTexto(id) {
        const texto = document.getElementById(id).textContent;
        if (texto) {
            navigator.clipboard.writeText(texto).then(() => {
                alert("Texto copiado al portapapeles");
            }).catch(err => {
                console.error("Error al copiar:", err);
            });
        } else {
            alert("No hay texto para copiar");
        }
    }

    // Asignar eventos
    document.getElementById("btn-personalizado-encriptar").addEventListener("click", encriptar);
    document.getElementById("btn-personalizado-desencriptar").addEventListener("click", desencriptar);

    document.getElementById("btn-cesar-encriptar").addEventListener("click", encriptarCesar);
    document.getElementById("btn-cesar-desencriptar").addEventListener("click", desencriptarCesar);


    document.getElementById("btn-aes-encriptar").addEventListener("click", () => {
        const texto = document.getElementById("textoEncriptar").value;
        const clave = prompt("Introduce la clave para AES:");
        if (texto.trim() && clave.trim()) {
            const resultado = encriptarAES(texto, clave);
            document.getElementById("resultado-encriptar").textContent = resultado;
        }
    });

    document.getElementById("btn-aes-desencriptar").addEventListener("click", () => {
        const texto = document.getElementById("textoDesencriptar").value;
        const clave = prompt("Introduce la clave para AES:");
        if (texto.trim() && clave.trim()) {
            const resultado = desencriptarAES(texto, clave);
            document.getElementById("resultado-desencriptar").textContent = resultado || "Error al desencriptar";
        }
    });

    document.getElementById("btn-des-encriptar").addEventListener("click", () => {
        const texto = document.getElementById("textoEncriptar").value;
        const clave = prompt("Introduce la clave para DES:");
        if (texto.trim() && clave.trim()) {
            const resultado = encriptarDES(texto, clave);
            document.getElementById("resultado-encriptar").textContent = resultado;
        }
    });

    document.getElementById("btn-des-desencriptar").addEventListener("click", () => {
        const texto = document.getElementById("textoDesencriptar").value;
        const clave = prompt("Introduce la clave para DES:");
        if (texto.trim() && clave.trim()) {
            const resultado = desencriptarDES(texto, clave);
            document.getElementById("resultado-desencriptar").textContent = resultado || "Error al desencriptar";
        }
    });

</script>
</body>
</html>